{
  "name": "nightmare",
  "version": "1.8.2",
  "author": {
    "name": "Segment"
  },
  "keywords": [
    "nightmare",
    "phantomjs"
  ],
  "description": "A high level wrapper for Phantomjs",
  "repository": {
    "type": "git",
    "url": "https://github.com/segmentio/nightmare.git"
  },
  "dependencies": {
    "clone": "~0.1.11",
    "debug": "^0.7.4",
    "defaults": "~1.0.0",
    "once": "1.3.0",
    "phantom": "^0.7.0",
    "jsesc": "^0.5.0"
  },
  "devDependencies": {
    "after": "~0.8.1",
    "basic-auth": "^1.0.0",
    "basic-auth-connect": "^1.0.0",
    "express": "^4.12.3",
    "mocha": "~1.17.0",
    "multer": "^0.1.8",
    "serve-static": "^1.9.2",
    "should": "~2.1.1"
  },
  "main": "lib/index",
  "readme": "[![Build Status](https://circleci.com/gh/segmentio/nightmare.png?circle-token=dbb94336673268633371a89865e008b70ffedf6d)](https://circleci.com/gh/segmentio/nightmare)\nNightmare\n=========\n\nNightmare is a high level wrapper for [PhantomJS](http://phantomjs.org/) that lets you automate browser tasks.\n\nThe goal is to expose just a few simple methods, and have an API that feels synchronous for each block of scripting, rather than deeply nested callbacks. It's designed for automating tasks across sites that don't have APIs.\n\n[Daydream](https://github.com/segmentio/daydream) is a complementary chrome extension built by [@stevenmiller888](https://github.com/stevenmiller888) that generates Nightmare scripts for you while you browse.\n\n* [Examples](#examples)\n* [API](#api)\n  - [Create an instance](#new-nightmareoptions)\n  - [Interact with the page](#interact-with-the-page)\n  - [Extract from the page](#extract-from-the-page)\n  - [Settings](#settings)\n* [Plugins](#plugins)\n* [Usage](#usage)\n\n## Examples\n\nLet's search on Yahoo:\n\n```js\nvar Nightmare = require('nightmare');\nnew Nightmare()\n  .goto('http://yahoo.com')\n    .type('input[title=\"Search\"]', 'github nightmare')\n    .click('.searchsubmit')\n    .run(function (err, nightmare) {\n      if (err) return console.log(err);\n      console.log('Done!');\n    });\n```\n\nOr, let's run some mocha tests:\n\n```js\nvar Nightmare = require('nightmare');\nvar expect = require('chai').expect; // jshint ignore:line\n\ndescribe('test yahoo search results', function() {\n  this.timeout(30000);\n\n  it('should find the nightmare github link first', function(done) {\n    new Nightmare()\n      .goto('http://yahoo.com')\n        .type('input[title=\"Search\"]', 'github nightmare')\n        .click('.searchsubmit')\n        .wait('.url.breadcrumb')\n        .evaluate(function () {\n          return document.querySelector('.url.breadcrumb').innerText;\n        }, function (breadcrumb) {\n          expect(breadcrumb).to.equal('github.com');\n        })\n        .run(done);\n  });\n});\n```\n\nOr, here's how you might automate a nicely abstracted login + task on Swiftly:\n\n```js\nvar Nightmare = require('nightmare');\nvar Swiftly = require('nightmare-swiftly');\nnew Nightmare()\n  .use(Swiftly.login(email, password))\n  .use(Swiftly.task(instructions, uploads, path))\n  .run(function(err, nightmare){\n    if (err) return fn(err);\n    fn();\n  });\n```\n\nAnd [here's the `nightmare-swiftly` plugin](https://github.com/segmentio/nightmare-swiftly).\n\nYou can see examples of every function [in the tests here](https://github.com/segmentio/nightmare/blob/master/test/index.js).\n\n## API\n\n#### new Nightmare(options)\nCreate a new instance that can navigate around the web.\n\nThe available options are:\n* `timeout`: how long to wait for page loads, default `5000ms`.\n* `interval`: how frequently to poll for page load state, default `50ms`.\n* `port`: port to mount the phantomjs instance to, default `12301`.\n* `weak`: set dnode weak option to `false` to fix cpp compilation for windows users, default `true`.\n* `loadImages`: load all inlined images, default `true`.\n* `ignoreSslErrors`: ignores SSL errors like expired or self-signed certificates, default `true`.\n* `sslProtocol`: set the protocol for secure connections `[sslv3|sslv2|tlsv1|any]`, default `any`.\n* `webSecurity`: enables web security and forbids cross-domain XHR, default `true`.\n* `proxy`: specify the proxy server to use `address:port`, default not set.\n* `proxyType`: specify the proxy server type `[http|socks5|none]`, default not set.\n* `proxyAuth`: specify the auth information for the proxy `user:pass`, default not set.\n* `cookiesFile`: specify the file to store the persistent cookies, default not set.\n* `phantomPath`: specify a different custom path to PhantomJS, default not set.\n\n\n### Interact with the Page\n\n#### .goto(url)\nLoad the page at `url`.\n\n#### .back()\nGo back to the previous page.\n\n#### .forward()\nGo forward to the next page.\n\n#### .refresh()\nRefresh the current page.\n\n#### .click(selector)\nClicks the `selector` element once.\n\n#### .type(selector, text)\nEnters the `text` provided into the `selector` element.\n\n#### .check(selector)\nToggles the `selector` checkbox element.\n\n#### .select(selector, option)\nChanges the `selector` dropdown element to the option with attribute [value=`option`]\n\n#### .upload(selector, path)\nSpecify the `path` to upload into a file input `selector` element.\n\n#### .scrollTo(top, left)\nScrolls the page to desired position. `top` and `left` are always relative to the top left corner of the document.\n\n#### .inject(type, file)\nInject a local `file` onto the current page. The file `type` must be either 'js' or 'css'.\n\n#### .evaluate(fn, cb, arg1, arg2,...)\nInvokes `fn` on the page with `arg1, arg2,...`. All the `args` are optional. On completion it passes the return value of `fn` as to `cb(res)`. Useful for extracting information from the page. Here's an example:\n\n```js\nvar p1 = 1;\nvar p2 = 2;\n\nnightmare\n  .evaluate(function (param1, param2) {\n        // now we're executing inside the browser scope.\n        return param1 + param2;\n     }, function (result) {\n        // now we're inside Node scope again\n        console.log( result);\n     }, p1, p2 // <-- that's how you pass parameters from Node scope to browser scope\n  ) // end evaluate\n  .run();\n```\n\n#### .wait()\nWait until a page finishes loading, typically after a `.click()`.\n\n#### .wait(ms)\nWait for `ms` milliseconds e.g. `.wait(5000)`\n\n#### .wait(selector)\nWait until the element `selector` is present e.g. `.wait('#pay-button')`\n\n#### .wait(fn, value, [delay])\nWait until the `fn` evaluated on the page returns `value`. Optionally, refresh the page every `delay` milliseconds, and only check after each refresh.\n\n#### .use(plugin)\nUseful for using repeated code blocks, see the example with Swiftly login and task creation in the docs above.\n\n#### .run(cb)\nExecutes the queue of functions, and calls your `cb` when the script hits an error or completes the queue. The callback signature is `cb(err, nightmare)`.\n\n\n### Extract from the Page\n\n#### .exists(selector,cb)\nDetermines if the selector exists, or not, on the page. The signature of the callback is `cb(boolean)`.\n\n#### .visible(selector,cb)\nDetermines if a selector is visible, or not, on the page. The signature of the callback is `cb(boolean)`.\n\n#### .on(event, callback)\nCapture page events with the callback. You have to call `.on()` before calling `.goto()`. Supported events are:\n* `initialized` - callback()\n* `loadStarted` - callback()\n* `loadFinished` - callback(status)\n* `urlChanged` - callback(targetUrl)\n* `navigationRequested` - callback(url, type, willNavigate, main)\n* `resourceRequestStarted` - callback(requestData, networkRequest), inside phantomjs context, useful for aborting `networkRequest.abort()` or changing requests `networkRequest.changeUrl(url)`, `networkRequest.setHeader(key, value)`\n* `resourceRequested` - callback(requestData), outside phantomjs context, useful for listening for resourceRequests\n* `resourceReceived` - callback(response)\n* `resourceError` - callback(resourceError)\n* `consoleMessage` - callback(msg, lineNumber, sourceId)\n* `alert` - callback(msg)\n* `confirm` - callback(msg)\n* `prompt` - callback(msg, defaultValue)\n* `error` - callback(msg, trace)\n* `timeout` - callback(msg) fired when a .wait() times out before condition becomes true\n* `exit` - callback(code, signal) fired when the underlying phantom process dies unexpectedly (if not handled, this will become an uncaught exception)\n\nFor a more in-depth description, see [the full callbacks list for phantomjs](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#callbacks-list).\n\n#### .screenshot(path)\nSaves a screenshot of the current page to the specified `path`. Useful for debugging. Note the path must include the file extension. Supported formats include .png, .gif, .jpeg, and .pdf.\n\n#### .pdf(path)\nSaves a PDF with A4 size pages of the current page to the specified `path`.\n\n#### .title(cb)\nGet the title of the current page, the callback signature is `cb(title)`.\n\n#### .url(cb)\nGet the url of the current page, the signature of the callback is `cb(url)`.\n\n### Settings\nThese functions must be called _before_ `.goto(url)`.\n\n#### .authentication(user, password)\nSet the `user` and `password` for accessing a web page using basic authentication. Be sure to set it before calling `.goto(url)`.\n\n```js\nnew Nightmare()\n  .authentication('myUserName','myPassword')\n  .goto('http://httpbin.org/basic-auth/myUserName/myPassword')\n  .run(function( err, nightmare){\n    console.log(\"done\");\n  });\n```\n\n#### .useragent(useragent)\nSet the `useragent` used by PhantomJS. You have to set the useragent before calling `.goto()`.\n\n#### .viewport(width, height)\nSet the `width` and `height` of the viewport, useful for screenshotting. Weirdly, you have to set the viewport before calling `.goto()`.\n\n#### .zoom(zoomFactor)\nSet the amount of zoom on the page. Default for a page is zoomFactor = 1. To zoom to 200%, set zoomFactor to 2. Combine with larger viewports to produce high DPI screenshots.\n\n```js\nnew Nightmare()\n  //double DPI render of 1600x900\n  .viewport(3200, 1800)\n  .zoom(2)\n  .goto('http://www.wikipedia.org')\n  .wait()\n  .screenshot('test/testScaleIs2.png')\n  .run(function( err, nightmare){\n    console.log(\"done\");\n  });\n```\n\n\n#### .headers(headers)\nSet the request `headers`. You have to call this before calling `.goto()`.\n\n## Plugins\n\nHere's a list of plugins, pull request to add your own to the list :)\n\n* [nightmare-swiftly](https://github.com/segmentio/nightmare-swiftly)\n* [nightmare-google-oauth2](https://github.com/h2non/nightmare-google-oauth2)\n\n## Usage\n#### Installation\nNightmare is a Node.js module, so you'll need to [have Node.js installed](http://nodejs.org/). You'll also need to have phantomjs itself installed:\n\n```bash\n$ sudo brew update && brew install phantomjs\n$ npm install --save nightmare\n```\nAlternatively, you can download Phantom JS from http://phantomjs.org\n\n#### Execution\nNightmare is a node module that can be used in a Node.js script or module. Here's a simple script to open a web page:\n```js\nvar Nightmare = require('nightmare');\nvar nightmare = new Nightmare();\nnightmare\n  .goto('http://kayak.com')\n  .run(function(err, nightmare){\n    console.log('Done.');\n  });\n```\nIf you save this as `kayak.js`, you can run it on the command line like this: `node kayak.js`.\n\n#### Debug\nTo run the same file with debugging output, run it like this `DEBUG=nightmare node kayak.js`.\n\nThis will print out some additional information about what's going on:\n\n```bash\nnightmare queueing action \"goto\" +0ms\n  nightmare run +3ms\n  nightmare .setup() creating phantom instance on port 12301 +1ms\n  nightmare .setup() phantom instance created +145ms\n  nightmare .setup() phantom page created +4ms\n  nightmare .goto() url: http://kayak.com +2ms\n  nightmare .goto() page loaded: success +1s\n  nightmare .teardownInstance() tearing down and bumping port to 12302 +501ms\nDone.\n```\n\n#### Tests\nAutomated tests for nightmare itself are run using [Mocha](http://mochajs.org/) and [Should](https://github.com/shouldjs/should.js), both of which will be installed via `npm install`. To run nightmare's tests, just do `make test`.\n\nWhen the tests are done, you'll see something like this:\n\n```bash\nmake test\n  ․․․․․․․․․․․․․․․․․․․․․․․․․․\n  42 passing (3m)\n```\n\n## License (MIT)\n\n```\nWWWWWW||WWWWWW\n W W W||W W W\n      ||\n    ( OO )__________\n     /  |           \\\n    /o o|    MIT     \\\n    \\___/||_||__||_|| *\n         || ||  || ||\n        _||_|| _||_||\n       (__|__|(__|__|\n```\n\nCopyright (c) 2015 Segment.io, Inc. <friends@segment.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/segmentio/nightmare/issues"
  },
  "homepage": "https://github.com/segmentio/nightmare",
  "_id": "nightmare@1.8.2",
  "dist": {
    "shasum": "bad8fb1d1709eed16b1b31804a1a266fc02f4eb9"
  },
  "_from": "nightmare@^1.7.0",
  "_resolved": "https://registry.npmjs.org/nightmare/-/nightmare-1.8.2.tgz"
}
